package beans;
// Generated 17.05.2020. 19.35.51 by Hibernate Tools 4.3.1

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import util.HibernateUtil;




/**
 * Korisnik generated by hbm2java
 */
public class Korisnik  implements java.io.Serializable {


     private String username;
     private String password;
     private String tip;
     private int status;
     private Poljoprivrednik poljoprivrednik;
     private Preduzece preduzece;

    public Korisnik() {
    }

	
    public Korisnik(String username, String password, String tip, int status) {
        this.username = username;
        this.password = password;
        this.tip = tip;
        this.status = status;
    }
    public Korisnik(String username, String password, String tip, int status, Poljoprivrednik poljoprivrednik, Preduzece preduzece) {
       this.username = username;
       this.password = password;
       this.tip = tip;
       this.status = status;
       this.poljoprivrednik = poljoprivrednik;
       this.preduzece = preduzece;
    }
   
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getTip() {
        return this.tip;
    }
    
    public void setTip(String tip) {
        this.tip = tip;
    }
    public int getStatus() {
        return this.status;
    }
    
    public void setStatus(int status) {
        this.status = status;
    }
    public Poljoprivrednik getPoljoprivrednik() {
        return this.poljoprivrednik;
    }
    
    public void setPoljoprivrednik(Poljoprivrednik poljoprivrednik) {
        this.poljoprivrednik = poljoprivrednik;
    }
    public Preduzece getPreduzece() {
        return this.preduzece;
    }
    
    public void setPreduzece(Preduzece preduzece) {
        this.preduzece = preduzece;
    }




    public static Korisnik dohvatiKorisnika(String username){
         SessionFactory sf = HibernateUtil.getSessionFactory();
         Session session = sf.openSession();
         session.beginTransaction();
         Criteria c = session.createCriteria(Korisnik.class);
         Korisnik korisnik = (Korisnik) c.add(Restrictions.eq("username", username)).uniqueResult();
         session.getTransaction().commit();
         session.close();
         return korisnik;
         
    }
    
    
    public static Korisnik ulogujKorisnika(String username, String password){
        SessionFactory sf = HibernateUtil.getSessionFactory();
         Session session = sf.openSession();
         session.beginTransaction();
         
       Query q=  session.createQuery("from Korisnik k where k.username = '" + username + "' and k.password = '"+ password + "' and k.status='"+1+"'");
        Korisnik k=(Korisnik) q.uniqueResult();
        session.getTransaction().commit();
        session.close();
        return k;
    }
    
    public static void sacuvajKorisnika(Korisnik k){
         SessionFactory sf=HibernateUtil.getSessionFactory();
         Session session = sf.openSession();
         session.beginTransaction();
        
          session.save(k);
          session.getTransaction().commit();
          session.close();
        
    }
    
    public static List<Korisnik> dohvatiSveKorisnike(){
          List<Korisnik> korisnici=new ArrayList<Korisnik>();
          SessionFactory sf=HibernateUtil.getSessionFactory();
          Session session = sf.openSession();
          session.beginTransaction();
          
          korisnici= session.createCriteria(Korisnik.class).add(Restrictions.eq("status", 0)).list();
          
          session.getTransaction().commit();
          session.close();
          return korisnici;
    }
    
    public static void prihvatiZahtev(Korisnik k){
          k.setStatus(1);
          SessionFactory sf=HibernateUtil.getSessionFactory();
          Session session = sf.openSession();
          session.beginTransaction();
          session.update(k);

          session.getTransaction().commit();
          session.close();
    }
    
    public static void odbijZahtev(Korisnik k){
        SessionFactory sf=HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        if(k.tip.equals("poljoprivrednik")){
            session.delete(k.poljoprivrednik);
        }else{
            session.delete(k.preduzece);
        }
        
        session.getTransaction().commit();
        session.close();
    }
    
    public static void obrisiKorisnika(Korisnik k){
          SessionFactory sf=HibernateUtil.getSessionFactory();
          Session session = sf.openSession();
          session.beginTransaction();
          session.delete(k);
          session.getTransaction().commit();
          session.close();
    }
    
    public static void azurirajKorisnika(Korisnik k){
          SessionFactory sf=HibernateUtil.getSessionFactory();
          Session session = sf.openSession();
          session.beginTransaction();
          session.update(k);
          session.getTransaction().commit();
          session.close();
    }
    
     public static void azuriraj(Korisnik k){
        SessionFactory sf=HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        if(k.tip.equals("poljoprivrednik")){
            session.update(k.poljoprivrednik);
        }else if(k.tip.equals("preduzetnik")){
            session.update(k.preduzece);
        }else{
            session.update(k);
        }
        
        session.getTransaction().commit();
        session.close();
    }
     
     public static List<Korisnik> dohvatiRegistrovaneKorisnike(){
          List<Korisnik> korisnici=new ArrayList<Korisnik>();
          SessionFactory sf=HibernateUtil.getSessionFactory();
          Session session = sf.openSession();
          session.beginTransaction();
          
          String upit="from Korisnik k where k.status=1 and k.tip!='admin'";
          Query query = session.createQuery(upit);
          korisnici=query.list();
          session.getTransaction().commit();
          session.close();
          return korisnici;
     }
    
   
}


